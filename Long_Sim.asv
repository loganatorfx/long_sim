% Longitudinal Vehicle Simulation
close all
clc
fprintf('Starting new simulation run...\n');
load('torque_lookup_data.mat'); 

% Import Raceline
raceline = readtable('lvms_clean.csv');
raceline_distance = raceline.s_m;
raceline_speed = raceline.vx_mps;
raceline_acceleration = raceline.ax_mps2;
raceline_kappa_radpm = raceline .kappa_radpm;

% Spatial stepping parameters
dx = 1.0;  % meters per simulation step
track_length = max(raceline_distance);
N = ceil(track_length / dx) + 1;

% Vehicle parameters
mass = 800;                      % kg
wheel_radius = 0.35;            % meters
gear_ratios = [2.917, 1.875, 1.381, 1.115, 0.960, 0.889];
Cd = 0.858;                     % drag coefficient
A = 1.0;                        % frontal area [m^2]
rho = 1.225;                    % air density [kg/m^3]
Cr = 0.015;                     % rolling resistance coefficient
efficiency = 0.9;               % drivetrain efficiency
final_drive = 3.0;              % final drive ratio

% Gear-specific shift RPM thresholds (updated to match gearset)
downshift_rpm_thresh = [0,    2700, 3800, 4000, 4300, 4700]; % gear 1 to 6 (lower bounds)
upshift_rpm_thresh   = [5000, 6200, 6200, 6200, 6200, 6950]; % gear 1 to 6 (upper bounds)
max_gear = length(gear_ratios);

% Preallocate states
time = zeros(1, N);
v = zeros(1, N);
s = zeros(1, N);
a = zeros(1, N);
rpm = zeros(1, N);
gear = ones(1, N);  % start in 1st gear
T_engine = zeros(1, N);
v_target = zeros(1, N);
a_cmd = zeros(1, N);
a_lat = zeros(1, N);  % Preallocate lateral acceleration

% Initial conditions
s(1) = 0;
v(1) = interp1(raceline_distance, raceline_speed, s(1), 'linear', 'extrap');
dt = 0.01;

%Torque Spool up Params 
T_engine_prev = 0;
torque_rate_limit = 200;  % Nm/s, tune as needed

% Gear update with lateral acceleration-based gear hold(passive shift)
lat_thresh = 5.0;  % [m/s²], tune as needed

% Preallocate
throttle_vec = zeros(1, N);
brake_vec = zeros(1, N);

gear(1) = 4;

min_time_between_shifts = 2.0;  % seconds, minimum time between gear shifts
time_since_last_shift = Inf;  % initialize to large so first shift can happen
predictive_shift_times = [];  % stores times when predictive shifts occur
verbose = true;   % Set to false to disable debug printouts




for i = 1:N-1
    %Shift Timing
    time_since_last_shift = time_since_last_shift + dt;


    %Check For End Of Sim
    if s(i) >= track_length
        fprintf('Reached end of track at i=%d\n', i);
        break;
    end

    %Update Gear and Gear Ratio
    current_gear = gear(i);
    gear_ratio = gear_ratios(current_gear);

    %Update RPM
    rpm(i) = compute_rpm(v(i), gear_ratio, final_drive, wheel_radius);

    %Velocity Tracking Control 
    [v_target(i), a_cmd(i), throttle, brake] = velocity_control( ...
    s(i), v(i), raceline_distance, raceline_speed, raceline_acceleration, dt);

    % Polynomial model-based torque prediction (data-driven)
    T_engine(i) = torque_model(rpm(i), throttle);

    % Limit torque rate of change to prevent sudden spikes
    T_engine(i) = min(T_engine_prev + torque_rate_limit * dt, T_engine(i));
    T_engine_prev = T_engine(i);

    %Compute Forces
    [F_net, ~, T_wheel(i)] = compute_forces(T_engine(i), gear_ratio, final_drive, efficiency, ...
                                wheel_radius, v(i), rho, Cd, A, Cr, mass, brake);
    %Compute Acceleration
    a(i) = F_net / mass;

    %Find Timestep(sim is dist based)
    v_current = max(v(i), 1.0);
    dt = dx / v_current;
    dt = dt;

    %Update Velocity and Displacement and time
    v(i+1) = max(v(i) + a(i) * dt, 0.5);
    s(i+1) = s(i) + dx;
    time(i+1) = time(i) + dt;

    %Save throttle and brake commnads:
    [v_target(i), a_cmd(i), throttle, brake] = velocity_control( ...
        s(i), v(i), raceline_distance, raceline_speed, raceline_acceleration, dt);
    
    throttle_vec(i) = throttle;
    brake_vec(i) = brake;

    % % ///////PASSIVE////////
    % % Predict next RPM
    % next_rpm = (v(i+1) * 60 / (2 * pi * wheel_radius)) * gear_ratio * final_drive;
    % 
    % % Compute lateral acceleration
    % kappa_i = interp1(raceline_distance, raceline_kappa_radpm, s(i), 'linear', 'extrap');
    % a_lat(i) = v_target(i)^2 * kappa_i;
    % 
    % % Passive Gearshifting logic inline
    % if abs(a_lat(i)) > lat_thresh
    %     gear(i+1) = current_gear;
    % else
    %     skip_upshift = throttle < 0.3;
    %     if current_gear < max_gear && next_rpm > upshift_rpm_thresh(current_gear) && ~skip_upshift
    %         gear(i+1) = current_gear + 1;
    %     elseif current_gear > 1 && next_rpm < downshift_rpm_thresh(current_gear)
    %         gear(i+1) = current_gear - 1;
    %     else
    %         gear(i+1) = current_gear;
    %     end
    % end
    % % % ///////PASSIVE////////

    % /////////PREDICTIVE//////////
    t_lookahead        = 0.9;      % seconds, lookahead horizon
    t_shift_window     = 0.5;      % seconds, additional shift evaluation window
    dt_lookahead       = 0.1;      % seconds, resolution of lookahead scan
    min_lat_thresh     = 2.0;      % maximum threshold at low speed
    scale_factor       = 0.0015;   % units: (m/s)^2 to m/s²

    % === Block shifting under high current lateral load ===
    kappa_now = interp1(raceline_distance, raceline_kappa_radpm, s(i), 'linear', 'extrap');
    a_lat_now = v(i)^2 * kappa_now;
    a_lat(i) = a_lat_now;  % <-- Always store a_lat
    
    if abs(a_lat_now) > 6
        gear(i+1) = current_gear;
        if verbose
            fprintf("Locked at t=%.2f — current lateral accel too high (%.2f > 5.00)\n", ...
                time(i), abs(a_lat_now));
        end
        continue;
    end

    % Predict lookahead conditions
    s_lookahead = s(i) + v(i) * t_lookahead;
    v_lookahead = interp1(raceline_distance, raceline_speed, s_lookahead, 'linear', 'extrap');
    kappa_lookahead = interp1(raceline_distance, raceline_kappa_radpm, s_lookahead, 'linear', 'extrap');
    future_rpm = (v_lookahead * 60 / (2 * pi * wheel_radius)) * gear_ratio * final_drive;

    [a_lat(i), ~] = compute_lateral_accel(s(i), v(i), raceline_distance, raceline_kappa_radpm);  % store current a_lat
    
    [next_gear, pred_flag, lat_thresh, lat_avg] = predictive_shift_logic(i, s, v, gear, ...
        time_since_last_shift, raceline_distance, raceline_speed, raceline_kappa_radpm, ...
        gear_ratios, downshift_rpm_thresh, t_lookahead, t_shift_window, dt_lookahead, ...
        min_lat_thresh, scale_factor, final_drive, wheel_radius);
    
    lat_thresh_vec(i) = lat_thresh;
    a_lat_lookahead_vec(i) = lat_avg;
    
    if pred_flag
        gear(i+1) = next_gear;
        predictive_shift_times(end+1) = time(i);
        time_since_last_shift = 0;
    else
        gear(i+1) = current_gear;
    end


    %//////////PREDICTIVE/////////////



end

sim_length = i;
fprintf('Lap completed in %.2f seconds over %.1f meters\n', time(sim_length), s(sim_length));

% Truncate vectors
time = time(1:sim_length);
v = v(1:sim_length);
s = s(1:sim_length);
a = a(1:sim_length);
rpm = rpm(1:sim_length);
T_engine = T_engine(1:sim_length);
gear = gear(1:sim_length);
v_target = interp1(raceline_distance, raceline_speed, s, 'linear', 'extrap');
a_lat = a_lat(1:sim_length);
throttle_vec = throttle_vec(1:sim_length);
brake_vec = brake_vec(1:sim_length);
T_wheel = T_wheel(1:sim_length);
a_lat_lookahead_vec = a_lat_lookahead_vec(1:sim_length);
lat_thresh_vec = lat_thresh_vec(1:sim_length);

% Create uniform time vector for plotting (e.g., every 0.1 s)
time_uniform = 0:0.1:time(end);

% Resample key variables using interpolation
v_plot        = interp1(time, v, time_uniform, 'linear', 'extrap');
v_target_plot = interp1(time, v_target, time_uniform, 'linear', 'extrap');
rpm_plot      = interp1(time, rpm, time_uniform, 'linear', 'extrap');
T_engine_plot = interp1(time, T_engine, time_uniform, 'linear', 'extrap');
gear_plot     = interp1(time, gear, time_uniform, 'previous', 'extrap');  % piecewise constant
a_lat_plot = interp1(time, a_lat, time_uniform, 'linear', 'extrap');
throttle_plot = interp1(time, throttle_vec, time_uniform, 'linear', 'extrap');
brake_plot    = interp1(time, brake_vec,    time_uniform, 'linear', 'extrap');
T_wheel_plot = interp1(time, T_wheel, time_uniform, 'linear', 'extrap');
pred_shift_rpm = interp1(time, rpm, predictive_shift_times, 'linear', 'extrap');
pred_shift_gear = interp1(time, gear, predictive_shift_times, 'previous', 'extrap');
a_lat_lookahead_vec = a_lat_lookahead_vec(1:sim_length);
a_lat_lookahead_plot = interp1(time, a_lat_lookahead_vec, time_uniform, 'linear', 'extrap');
lat_thresh_plot      = interp1(time, lat_thresh_vec, time_uniform, 'linear', 'extrap');
% Interpolate RPM thresholds for each timestep based on current gear
downshift_rpm_plot = interp1(1:max_gear, downshift_rpm_thresh, gear_plot, 'linear', 'extrap');
upshift_rpm_plot   = interp1(1:max_gear, upshift_rpm_thresh,   gear_plot, 'linear', 'extrap');


% Lateral acceleration plot in its own figure
figure(2); clf;
plot(time_uniform, a_lat_plot, 'b-');
hold on;
yline(5, 'r--', 'Threshold +5');
yline(-5, 'r--', 'Threshold -5');
xlabel('Time [s]');
ylabel('Lateral Acceleration [m/s^2]');
title('Lateral Acceleration Over Time');
grid on;

figure(1); clf;
subplot(6,1,1);
plot(time_uniform, v_plot, 'b-', time_uniform, v_target_plot, 'r--');
ylabel('Speed [m/s]'); legend('Simulated', 'Target'); grid on;

subplot(6,1,2);
plot(time_uniform, rpm_plot, 'g-'); hold on;
plot(time_uniform, downshift_rpm_plot, 'k--', 'DisplayName', 'Downshift Threshold');
plot(time_uniform, upshift_rpm_plot,   'k--', 'DisplayName', 'Upshift Threshold');
plot(predictive_shift_times, pred_shift_rpm, 'rv', 'MarkerSize', 6, 'MarkerFaceColor', 'r'); % predictive shift marker
ylabel('RPM'); grid on;
legend('RPM', 'Downshift Threshold', 'Upshift Threshold', 'Predictive Shift', 'Location', 'best');

subplot(6,1,3);
plot(time_uniform, T_wheel_plot, 'm-');
ylabel('Wheel Torque [Nm]');
grid on;

subplot(6,1,4); hold on;
y_limits = [min(gear_plot)-0.5, max(gear_plot)+0.5];
high_lat_mask = abs(a_lat_plot) > 5;
in_region = false;
for i = 1:length(high_lat_mask)
    if high_lat_mask(i) && ~in_region
        start_idx = i;
        in_region = true;
    elseif ~high_lat_mask(i) && in_region
        end_idx = i - 1;
        h = fill([time_uniform(start_idx) time_uniform(end_idx) time_uniform(end_idx) time_uniform(start_idx)], ...
                 [y_limits(1) y_limits(1) y_limits(2) y_limits(2)], ...
                 [1.0 0.7 0.7], 'EdgeColor', 'none', 'FaceAlpha', 0.5);
        uistack(h, 'bottom');
        in_region = false;
    end
end
if in_region
    end_idx = length(high_lat_mask);
    h = fill([time_uniform(start_idx) time_uniform(end_idx) time_uniform(end_idx) time_uniform(start_idx)], ...
             [y_limits(1) y_limits(1) y_limits(2) y_limits(2)], ...
             [1.0 0.7 0.7], 'EdgeColor', 'none', 'FaceAlpha', 0.5);
    uistack(h, 'bottom');
end


stairs(time_uniform, gear_plot, 'k-'); hold on;
plot(predictive_shift_times, pred_shift_gear, 'rv', 'MarkerSize', 6, 'MarkerFaceColor', 'r'); % red triangle
ylabel('Gear');
grid on;

subplot(6,1,5);
plot(time_uniform, throttle_plot, 'c-'); ylabel('Throttle'); grid on;

subplot(6,1,6);
plot(time_uniform, brake_plot, 'r-'); ylabel('Brake'); xlabel('Time [s]'); grid on;



% Focused plot around t = 60s
t_center = 60;
t_window = 10; % +/- 5 seconds
idx_focus = time_uniform >= (t_center - t_window) & time_uniform <= (t_center + t_window);

time_focus = time_uniform(idx_focus);
v_focus = v_plot(idx_focus);
v_target_focus = v_target_plot(idx_focus);
rpm_focus = rpm_plot(idx_focus);
T_wheel_focus = T_wheel_plot(idx_focus);
gear_focus = gear_plot(idx_focus);
throttle_focus = throttle_plot(idx_focus);
brake_focus = brake_plot(idx_focus);
a_lat_focus = a_lat_plot(idx_focus);
% Get only the predictive shift events in the zoom window
in_focus = predictive_shift_times >= (t_center - t_window) & predictive_shift_times <= (t_center + t_window);
pred_shift_times_focus = predictive_shift_times(in_focus);
pred_shift_gear_focus  = pred_shift_gear(in_focus);

figure(3); clf;
subplot(6,1,1);
plot(time_focus, v_focus, 'b-', time_focus, v_target_focus, 'r--');
ylabel('Speed [m/s]'); legend('Simulated', 'Target'); grid on;

subplot(6,1,2);
plot(time_focus, rpm_focus, 'g-'); ylabel('RPM'); grid on;

subplot(6,1,3);
plot(time_focus, T_wheel_focus, 'm-');
ylabel('Wheel Torque [Nm]');
grid on;

subplot(6,1,4);
stairs(time_focus, gear_focus, 'k-');
ylabel('Gear'); grid on;

subplot(6,1,4); hold on;
y_limits = [min(gear_focus)-0.5, max(gear_focus)+0.5];
high_lat_mask_focus = abs(a_lat_focus) > 5;
in_region = false;
for i = 1:length(high_lat_mask_focus)
    if high_lat_mask_focus(i) && ~in_region
        start_idx = i;
        in_region = true;
    elseif ~high_lat_mask_focus(i) && in_region
        end_idx = i - 1;
        h = fill([time_focus(start_idx) time_focus(end_idx) time_focus(end_idx) time_focus(start_idx)], ...
                 [y_limits(1) y_limits(1) y_limits(2) y_limits(2)], ...
                 [1.0 0.7 0.7], 'EdgeColor', 'none', 'FaceAlpha', 0.5);
        uistack(h, 'bottom');
        in_region = false;
    end
end
if in_region
    end_idx = length(high_lat_mask_focus);
    h = fill([time_focus(start_idx) time_focus(end_idx) time_focus(end_idx) time_focus(start_idx)], ...
             [y_limits(1) y_limits(1) y_limits(2) y_limits(2)], ...
             [1.0 0.7 0.7], 'EdgeColor', 'none', 'FaceAlpha', 0.5);
    uistack(h, 'bottom');
end

stairs(time_focus, gear_focus, 'k-');
ylabel('Gear'); grid on;


subplot(6,1,5);
plot(time_focus, throttle_focus, 'c-'); ylabel('Throttle'); grid on;

subplot(6,1,6);
plot(time_focus, brake_focus, 'r-'); ylabel('Brake'); xlabel('Time [s]'); grid on;

figure(4); clf;

% Shared predictive shift marker data
pred_shift_lat       = interp1(time, a_lat, predictive_shift_times, 'linear', 'extrap');
pred_shift_lookahead = interp1(time, a_lat_lookahead_vec, predictive_shift_times, 'linear', 'extrap');
pred_shift_thresh    = interp1(time, lat_thresh_vec, predictive_shift_times, 'linear', 'extrap');

% --- 1: Current lateral acceleration
subplot(2,1,1); hold on;
plot(time_uniform, a_lat_plot, 'b-');
plot(predictive_shift_times, pred_shift_lat, 'rv', 'MarkerFaceColor', 'r');
ylabel('a_{lat} [m/s²]');
title('Current Lateral Acceleration');
grid on;

% --- 2: Lookahead a_lat and threshold overlaid
subplot(2,1,2); hold on;
plot(time_uniform, a_lat_lookahead_plot, 'm-', 'DisplayName', 'Lookahead a_{lat}');
plot(time_uniform, lat_thresh_plot, 'k--', 'DisplayName', 'a_{lat} Threshold');
plot(predictive_shift_times, pred_shift_lookahead, 'rv', 'MarkerSize', 6, ...
    'MarkerFaceColor', 'r', 'DisplayName', 'Predictive Shift');
ylabel('a_{lat} [m/s²]');
xlabel('Time [s]');
title('Lookahead Lateral Acceleration and Threshold');
legend('Location', 'best');
grid on;





%%Function Models%%
% Torque function
function T_out = torque_model(rpm, throttle)
    persistent F loaded
    if isempty(loaded)
        data = load('torque_lookup_data.mat');
        [Xgrid, Ygrid] = ndgrid(data.X, data.Y);
        F = griddedInterpolant(Xgrid, Ygrid, data.T, 'linear', 'nearest');
        loaded = true;
    end

    rpm = min(max(rpm, 0), 7500);
    throttle = min(max(throttle, 0), 1);

    T_out = F(rpm, throttle);
    T_out = max(T_out, 0);
end

%RPM Calc
function rpm_val = compute_rpm(v, gear_ratio, final_drive, wheel_radius)
    if v > 0.5
        rpm_val = (v * 60 / (2 * pi * wheel_radius)) * gear_ratio * final_drive;
        % rpm_val = max(min(rpm_val, 7000), 1000);
    else
        rpm_val = 1000;
    end
end


%Force and Acceleration Based Control 

%Force Calcs
function [F_net, F_trac, T_wheel] = compute_forces(T_engine, gear_ratio, final_drive, efficiency, ...
                                          wheel_radius, v, rho, Cd, A, Cr, mass, brake)

    T_wheel = T_engine * gear_ratio * final_drive * efficiency;
    F_trac = T_wheel / wheel_radius;
    F_drag = 0.5 * rho * Cd * A * v^2;
    F_roll = Cr * mass * 9.81;
    F_brake = brake * 7000;

    F_net = F_trac - F_drag - F_roll - F_brake;
end

% Acceleration-Based Control
function [v_target_i, a_cmd, throttle, brake] = velocity_control(s_i, v_i, raceline_distance, raceline_speed, raceline_acceleration, dt)
    v_target_i = interp1(raceline_distance, raceline_speed, s_i, 'linear', 'extrap');
    a_path_i   = interp1(raceline_distance, raceline_acceleration, s_i, 'linear', 'extrap');
    
    if isnan(v_target_i) || v_target_i <= 0
        v_target_i = 20;
    end
    if isnan(a_path_i)
        a_path_i = 0;
    end

    % Gains
    kp_throttle = 0.2;
    kp_brake = 1.0;
    k_ff_throttle = 0.2;
    k_ff_brake = 0.0;
    
    v_err = v_target_i - v_i;
    
    % Feedback
    if v_err >= 0
        a_fb = kp_throttle * v_err;
    else
        a_fb = kp_brake * v_err;
    end
    
    % Feedforward
    if a_path_i >= 0
        a_ff = k_ff_throttle * a_path_i;
    else
        a_ff = k_ff_brake * a_path_i;
    end
    
    % Total command
    a_cmd = a_fb + a_ff;
    
    % Command-to-actuator mapping
    if a_cmd >= 0
        throttle = min(max(a_cmd, 0), 1);
        brake = 0;
    else
        throttle = 0;
        brake = min(max(-a_cmd, 0), 1);
    end


end

function [next_gear, predictive_shift_flag, lat_thresh_out, lat_lookahead_avg] = ...
    predictive_shift_logic(i, s, v, gear, time_since_last_shift, ...
    raceline_distance, raceline_speed, raceline_kappa_radpm, ...
    gear_ratios, downshift_rpm_thresh, t_lookahead, t_shift_window, ...
    dt_lookahead, min_lat_thresh, scale_factor, final_drive, wheel_radius)

    current_gear = gear(i);
    gear_ratio = gear_ratios(current_gear);
    next_gear = current_gear;
    predictive_shift_flag = false;

    kappa_now = interp1(raceline_distance, raceline_kappa_radpm, s(i), 'linear', 'extrap');
    a_lat_now = v(i)^2 * kappa_now;
    lat_thresh_out = NaN;
    lat_lookahead_avg = NaN;

    if abs(a_lat_now) > 6
        return  % Skip shift logic
    end

    s_lookahead = s(i) + v(i) * t_lookahead;
    v_lookahead = interp1(raceline_distance, raceline_speed, s_lookahead, 'linear', 'extrap');
    future_rpm = (v_lookahead * 60 / (2 * pi * wheel_radius)) * gear_ratio * final_drive;

    lat_thresh_out = min_lat_thresh + scale_factor * v_lookahead^2;

    % Compute lateral acceleration window
    t_eval = t_lookahead : dt_lookahead : (t_lookahead + t_shift_window);
    a_lat_window = zeros(size(t_eval));

    for j = 1:length(t_eval)
        s_eval = s(i) + v(i) * t_eval(j);
        v_eval = interp1(raceline_distance, raceline_speed, s_eval, 'linear', 'extrap');
        kappa_eval = interp1(raceline_distance, raceline_kappa_radpm, s_eval, 'linear', 'extrap');
        a_lat_window(j) = v_eval^2 * kappa_eval;
    end

    lat_lookahead_avg = mean(abs(a_lat_window));
    lat_ok = all(abs(a_lat_window) > lat_thresh_out);

    do_downshift = current_gear > 1 && ...
                   future_rpm < downshift_rpm_thresh(current_gear) && ...
                   time_since_last_shift >= 2.0;

    if do_downshift && lat_ok
        next_gear = current_gear - 1;
        predictive_shift_flag = true;
    end
end
